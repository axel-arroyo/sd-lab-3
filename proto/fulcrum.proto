syntax = "proto3";
package grpc;
option go_package = "./proto";

import "broker.proto";

service Fulcrum{
    rpc IsAvailable(Empty) returns (Empty);
    // functions
    rpc AddCity(AddCityRequest) returns (VectorClock);
    rpc DeleteCity(DeleteCityRequest) returns (VectorClock);
    rpc UpdateName(UpdateNameRequest) returns (VectorClock);
    rpc UpdateNumber(UpdateNumberRequest) returns (VectorClock);
    rpc GetNumberRebeldesFulcrum(GetNumberRebeldesRequest) returns (GetNumberRebeldesResponse);
    // Merge
    rpc VectorClockMerge(VectorClock) returns (Empty);
    rpc Merge(stream MergeRequest) returns (VectorClocks);
    rpc MergeFulcrums(stream MergeRequest) returns (Empty);
    rpc BidirectionalMerge(stream MergeRequest) returns (stream MergeResponse);
    rpc ClockMerge(VectorClocks) returns (VectorClocks);
}

message Empty{
}

message MergeRequest{
    string line = 1;
}

message MergeResponse{
    string line = 1;
}

message Vector{
    int32 X = 1;
    int32 Y = 2;
    int32 Z = 3;
}

message VectorClocks{
    map <string, Vector> vector_clocks = 1;
}

message AddCityRequest{
    string nombre_planeta = 1;
    string nombre_ciudad = 2;
    int32 soldados = 3;
}

message VectorClock{
    int32 x = 1;
    int32 y = 2;
    int32 z = 3;
    string ip = 4;
    string nombre_planeta = 5;
}

message UpdateNameRequest{
    string nombre_planeta = 1;
    string nombre_ciudad = 2;
    string nuevo_nombre = 3;
}

message UpdateNameResponse{
    int32 x = 1;
    int32 y = 2;
    int32 z = 3;
}

message UpdateNumberRequest{
    string nombre_planeta = 1;
    string nombre_ciudad = 2;
    int32 nuevo_numero = 3;
}

message UpdateNumberResponse{
    int32 x = 1;
    int32 y = 2;
    int32 z = 3;
}

message DeleteCityRequest{
    string nombre_planeta = 1;
    string nombre_ciudad = 2;
}

message DeleteCityResponse{
    int32 x = 1;
    int32 y = 2;
    int32 z = 3;
}
